#!/usr/bin/env python
from world import world, box, robot
from ising import ising
import matplotlib.pyplot as plt
import numpy as np

world = world(7, 7)
box1 = box((3,3), False)
robot = robot((3,4), 1)

world.addObject(box1)
world.addObject(robot)

print robot.sensors

print world.M

exit()

########################################################################
size=10


x=ising(size, robot)
x.h=np.random.randn(size)*0.1
x.J=np.zeros((size,size))

steps=200
T=100
T1=10000

X=np.zeros((size,T1))

x.randomize_state()
print x.s

x.HC=0

for rep in range(steps):
	x.CriticalLearningStep(T)
	if rep%1==0:
		print rep, x.HC

footprints = np.zeros((world.nRows, world.nCols))
world.updateObjectPosition(robot, (0,0))

for t in range(T1):
		x.SequentialGlauberStep()
		#~ X[:,t]=x.s
		move = tuple((x.s[size-2], x.s[size-1]))
		if move == (-1,-1):
			robot.move1DOWN()
		elif move == (-1,1):
			robot.move1LEFT()
		elif move == (1,-1):
			robot.move1RIGHT()
		elif move == (1,1):
			robot.move1UP()
			
		footprints[robot.coords] += 1

print footprints

plt.figure()
plt.imshow(footprints,interpolation='nearest')
plt.colorbar()
plt.title('Footprints')

plt.show()

exit()

########################################################################

#~ robot.move1LEFT()
#~ robot.move1UP()
#~ robot.move1UP()
#~ robot.move1UP()
#~ robot.move1DOWN()

#~ robot.updateSensors()
#~ print robot.sensors

#~ print world.M
